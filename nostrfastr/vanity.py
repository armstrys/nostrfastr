# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_vanity.ipynb.

# %% auto 0
__all__ = ['vanity_notifyr', 'gen_vanity_pubkey']

# %% ../nbs/04_vanity.ipynb 3
from .nostr import PrivateKey
from .notifyr import notifyr

# %% ../nbs/04_vanity.ipynb 5
def gen_vanity_pubkey(startswith: str, style='hex') -> PrivateKey:
    """randomly generate private keys until one matches the desire
    startswith for an npub or hex

    Parameters
    ----------
    startswith : str
        characters that the public key should start with. More chars
        means longer run time
    style : str, optional
        'npub' or 'hex' - npub is more commonly displayed on apps
        while hex is the true base private key with no encoding,
        by default 'hex'

    Returns
    -------
    PrivateKey
        returns a private key object
    """
    pubkey = ''
    if style == 'npub':
        npub_chars = '023456789acdefghjklmnpqrstuvwxyz'
        if not all(c in npub_chars for c in startswith):
            raise ValueError(f'character of selection not '
                              'in npub pattern ({npub_chars})')
        startswith = f'npub1{startswith}'
    else:
        hex_chars = 'abcdef0123456789'
        if not all(c in hex_chars for c in startswith):
            raise ValueError(f'character of selection not in '
                              'hex pattern ({hex_chars})')
    while not pubkey.startswith(startswith):
        privkey = PrivateKey()
        if style == 'npub':
            pubkey = privkey.public_key.bech32()
        else:
            pubkey = privkey.public_key.hex()
    return privkey

# %% ../nbs/04_vanity.ipynb 14
vanity_notifyr = notifyr(gen_vanity_pubkey)
