# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_notifyr.ipynb.

# %% auto 0
__all__ = ['send_nostr_message', 'set_private_key', 'get_private_key', 'delete_private_key', 'notifyr']

# %% ../nbs/03_notifyr.ipynb 4
from .client import Client
import time

# %% ../nbs/03_notifyr.ipynb 6
def send_nostr_message(notifyr_client: Client, message: str) -> None:
    """a simple function that takes a client and a message and
    sends the message to the client pubkey from the client pubkey
 
    Parameters
    ----------
    notifyr_client : Client
       A client class that will send an encrypted message for us
    message : str
       A message that will be encrypted and sent
    """
    with notifyr_client:
        recipient_pubkey_hex = notifyr_client.public_key.hex()
        event = notifyr_client.event_encrypted_message(recipient_hex=recipient_pubkey_hex,
                                                       message=message)
        notifyr_client.publish_event(event)
    pass


# %% ../nbs/03_notifyr.ipynb 8
import keyring
from .nostr import PrivateKey, PublicKey

# %% ../nbs/03_notifyr.ipynb 10
def set_private_key(notifyr_privkey_hex: str) -> None:
   """Set the private key in the computer keyring

   Parameters
   ----------
   notifyr_privkey_hex : str
       nostr hex private key
   """
   return keyring.set_password(service_name='nostr',
                               username='notifyr',
                               password=notifyr_privkey_hex)

def get_private_key() -> str:
    """get the nostr hex private key from the computer key ring

    Returns
    -------
    str
        nostr hex private key
    """
    return keyring.get_password(service_name='nostr',
                                username='notifyr')

def delete_private_key() -> None:
    """delete the nostr hex private key from the computer key ring.
    This is not used in the decorator function, but may be used
    if need for testing
    """
    return keyring.delete_password(service_name='nostr',
                                   username='notifyr')


# %% ../nbs/03_notifyr.ipynb 16
def notifyr(func):
   """A decorator that will set a nostr private key to `func.notifyr_privkey_hex
   and use that key to send an encrypted message to it's own public key on the start
   and termination of the decorated function. The output will send whether the function
   runs completely or ends in an error with an informative message.

   Parameters
   ----------
   func : function
       the function to be decorated

   Returns
   -------
   function
       the decorated function

   Raises
   ------
   e
       if the function fails, else returns the function result
   """

   notifyr_privkey_hex = get_private_key()
   if notifyr_privkey_hex is None:
      notifyr_privkey_hex = PrivateKey.hex()
   set_private_key(notifyr_privkey_hex)
   assert get_private_key() == notifyr_privkey_hex

   def loud_process(*args,**kwargs):
      notifyr_privkey_hex = get_private_key()
      notifyr_client = Client(private_key_hex=notifyr_privkey_hex,
                              relay_urls=['wss://relay.damus.io',
                                          'wss://brb.io'])
      notifyr_pubkey_hex = notifyr_client.public_key.hex()
      function_name = func.__name__
      message = 'process started!'
      send_nostr_message(notifyr_client=notifyr_client,
                         message=message)
      try:
         result = func(*args,**kwargs)
         message = f'**process**: {function_name}\n' \
                   f'**finished** with result of type:\n\t{type(result)}'
      except Exception as e:
         result = e
         message = f'**process name**: {function_name}\n' \
                   f'**failed** with error:\n\t{type(e).__name__}: {e}'
      send_nostr_message(notifyr_client=notifyr_client,
                         message=message)
      if issubclass(type(result), Exception):
         raise result
      else:
         return result
   loud_process.notifyr_private_key = notifyr_privkey_hex
   return loud_process
