# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_nostr.ipynb.

# %% auto 0
__all__ = ['PrivateKey', 'PublicKey']

# %% ../nbs/00_nostr.ipynb 3
from nostr import key
from nostr import bech32
from fastcore.utils import *

# %% ../nbs/00_nostr.ipynb 6
class PrivateKey(key.PrivateKey):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    @classmethod
    def from_hex(cls, hex: str) -> 'PrivateKey':
        return cls(bytes.fromhex(hex))

# %% ../nbs/00_nostr.ipynb 9
from nostr import bech32


class PublicKey(key.PublicKey):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    
    @classmethod
    def from_npub(cls, npub: str):
        """ Load a PublicKey from its bech32/nsec form """
        hrp, data, spec = bech32.bech32_decode(npub)
        raw_bytes = bech32.convertbits(data, 5, 8)[:-1]
        return cls(bytes(raw_bytes))

    @classmethod
    def from_hex(cls, hex: str) -> 'PrivateKey':
        return cls(bytes.fromhex(hex))
